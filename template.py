import os

# Base project structure
structure = {
    "football-data-pipeline": [
        "Makefile",
        "docker-compose.yml",
        "requirements.txt",
        "poetry.toml",
        "pyproject.toml",
        #"README.md",
        ".github/workflows/ci.yml",
        ".github/workflows/cd.yml",
        "config/settings.py",
        "config/postgres_config.yaml",
        "config/gcp_config.yaml",
        "src/__init__.py",
        "src/scraping/__init__.py",
        "src/scraping/scrapers/__init__.py",
        "src/scraping/scrapers/base_scraper.py",
        "src/scraping/scrapers/match_scraper.py",
        "src/scraping/scrapers/player_scraper.py",
        "src/scraping/scrapers/team_scraper.py",
        "src/scraping/scrapers/league_scraper.py",
        "src/scraping/utils/__init__.py",
        "src/scraping/utils/proxies.py",
        "src/scraping/utils/rate_limiter.py",
        "src/streaming/__init__.py",
        "src/streaming/producers/__init__.py",
        "src/streaming/producers/kafka_producer.py",
        "src/streaming/consumers/__init__.py",
        "src/streaming/consumers/kafka_consumer.py",
        "src/streaming/schemas/__init__.py",
        "src/streaming/schemas/match_schema.avsc",
        "src/streaming/schemas/player_schema.avsc",
        "src/streaming/schemas/team_schema.avsc",
        "src/processing/__init__.py",
        "src/processing/batch/__init__.py",
        "src/processing/batch/spark_processor.py",
        "src/processing/streaming/__init__.py",
        "src/processing/streaming/flink_processor.py",
        "src/processing/transformations/__init__.py",
        "src/processing/transformations/match_transformations.py",
        "src/processing/transformations/player_transformations.py",
        "src/processing/transformations/team_transformations.py",
        "src/storage/__init__.py",
        "src/storage/postgres/__init__.py",
        "src/storage/postgres/models.py",
        "src/storage/postgres/repository.py",
        "src/storage/gcp/__init__.py",
        "src/storage/gcp/bigquery.py",
        "src/storage/gcp/cloud_storage.py",
        "src/orchestration/__init__.py",
        "src/orchestration/airflow/__init__.py",
        "src/orchestration/airflow/dags/__init__.py",
        "src/orchestration/airflow/dags/data_extraction_dag.py",
        "src/orchestration/airflow/dags/data_processing_dag.py",
        "src/orchestration/kestra/__init__.py",
        "src/orchestration/kestra/flows/__init__.py",
        "src/orchestration/kestra/flows/real_time_flow.yaml",
        "src/visualization/__init__.py",
        "src/visualization/streamlit/__init__.py",
        "src/visualization/streamlit/app.py",
        "src/visualization/apis/__init__.py",
        "src/visualization/apis/data_api.py",
        "src/utils/__init__.py",
        "src/utils/logging_utils.py",
        "src/utils/validation_utils.py",
        "tests/__init__.py",
        "tests/test_scraping.py",
        "tests/test_processing.py",
        "tests/test_storage.py",
        "notebooks/data_exploration.ipynb",
        "dbt/dbt_project.yml",
        "dbt/models/staging/schema.yml",
        "dbt/models/staging/stg_matches.sql",
        "dbt/models/staging/stg_players.sql",
        "dbt/models/staging/stg_teams.sql",
        "dbt/models/marts/schema.yml",
        "dbt/models/marts/player_performance.sql",
        "dbt/models/marts/team_standings.sql",
        "dbt/models/marts/match_analytics.sql",
        "dbt/seeds/league_reference.csv",
        "deployment/docker/Dockerfile.scraper",
        "deployment/docker/Dockerfile.processor",
        "deployment/docker/Dockerfile.api",
        "deployment/kubernetes/scraper-deployment.yaml",
        "deployment/kubernetes/processor-deployment.yaml",
        "deployment/kubernetes/api-deployment.yaml",
        "deployment/terraform/main.tf",
        "deployment/terraform/variables.tf",
        "deployment/terraform/outputs.tf"
    ]
}

# Create directories and files
for root, files in structure.items():
    for path in files:
        full_path = os.path.join(root, path)
        os.makedirs(os.path.dirname(full_path), exist_ok=True)
        with open(full_path, "w") as f:
            f.write("")  # create empty file

print("Project structure generated successfully.")